C51 COMPILER V9.59.0.0   INFRARED                                                          12/02/2022 16:26:28 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE INFRARED
OBJECT MODULE PLACED IN .\Objects\Infrared.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE source\Infrared.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\Infrared.lst) TABS(2) OBJECT(.\Objects\Infrared.obj)

line level    source

   1          #define  _INFRARED_C
   2          #include "config.h"
   3          #include "Infrared.h"
   4          #include "Time.h"
   5          
   6          const uint8 code IrCodeMap[][2] = {  //红外键码到标准PC键码的映射表
   7              {0x45,0x00}, {0x46,0x00}, {0x47,0x1B}, //开关->无  Mode->无   静音->ESC
   8              {0x44,0x00}, {0x40,0x25}, {0x43,0x27}, //播放->无  后退->向左 前进->向右
   9              {0x07,0x00}, {0x15,0x28}, {0x09,0x26}, // EQ->无   减号->向下 加号->向上
  10              {0x16, '0'}, {0x19,0x1B}, {0x0D,0x0D}, //'0'->'0'  箭头->ESC  U/SD->回车
  11              {0x0C, '1'}, {0x18, '2'}, {0x5E, '3'}, //'1'->'1'  '2'->'2'   '3'->'3'
  12              {0x08, '4'}, {0x1C, '5'}, {0x5A, '6'}, //'4'->'4'  '5'->'5'   '6'->'6'
  13              {0x42, '7'}, {0x52, '8'}, {0x4A, '9'}, //'7'->'7'  '6'->'8'   '9'->'9'
  14          };
  15          
  16          bit irflag = 0;   //红外接收标志，收到一帧正确数据后置1
  17          uint8 ircode[4];  //红外代码接收缓冲区
  18          
  19          /* 红外接收驱动，检测接收到的键码，调度相应动作函数 */
  20          void InfraredDriver()
  21          {
  22   1          uint8 i;
  23   1          
  24   1          if (irflag)
  25   1          {
  26   2              irflag = 0;
  27   2              for (i=0; i<sizeof(IrCodeMap)/sizeof(IrCodeMap[0]); i++) //遍历映射表
  28   2              {
  29   3                  if (ircode[2] == IrCodeMap[i][0])  //在表中找到当前接收的键码后，
  30   3                  {                                  //用对应的映射码执行函数调度，
  31   4                      KeyAction(IrCodeMap[i][1]);    //直接调用按键动作函数即可。
  32   4                      break;
  33   4                  }
  34   3              }
  35   2          }
  36   1      }
  37          /* 初始化红外接收功能 */
  38          void InitInfrared()
  39          {
  40   1          IR_INPUT = 1;  //确保红外接收引脚被释放
  41   1          TMOD &= 0x0F;  //清零T1的控制位
  42   1          TMOD |= 0x10;  //配置T1为模式1
  43   1          TR1 = 0;       //停止T1计数
  44   1          ET1 = 0;       //禁止T1中断
  45   1          IT1 = 1;       //设置INT1为负边沿触发
  46   1          EX1 = 1;       //使能INT1中断
  47   1      }
  48          /* 获取当前高电平的持续时间 */
  49          uint16 GetHighTime()
  50          {
  51   1          TH1 = 0;  //清零T1计数初值
  52   1          TL1 = 0;
  53   1          TR1 = 1;  //启动T1计数
  54   1          while (IR_INPUT)  //红外输入引脚为1时循环检测等待，变为0时则结束本循环
C51 COMPILER V9.59.0.0   INFRARED                                                          12/02/2022 16:26:28 PAGE 2   

  55   1          {
  56   2              if (TH1 >= 0x40)
  57   2              {            //当T1计数值大于0x4000，即高电平持续时间超过约18ms时，
  58   3                  break;   //强制退出循环，是为了避免信号异常时，程序假死在这里。
  59   3              }
  60   2          }
  61   1          TR1 = 0;  //停止T1计数
  62   1      
  63   1          return (TH1*256 + TL1);  //T1计数值合成为16bit整型数，并返回该数
  64   1      }
  65          /* 获取当前低电平的持续时间 */
  66          uint16 GetLowTime()
  67          {
  68   1          TH1 = 0;  //清零T1计数初值
  69   1          TL1 = 0;
  70   1          TR1 = 1;  //启动T1计数
  71   1          while (!IR_INPUT)  //红外输入引脚为0时循环检测等待，变为1时则结束本循环
  72   1          {
  73   2              if (TH1 >= 0x40)
  74   2              {            //当T1计数值大于0x4000，即低电平持续时间超过约18ms时，
  75   3                  break;   //强制退出循环，是为了避免信号异常时，程序假死在这里。
  76   3              }
  77   2          }
  78   1          TR1 = 0;  //停止T1计数
  79   1      
  80   1          return (TH1*256 + TL1);  //T1计数值合成为16bit整型数，并返回该数
  81   1      }
  82          /* INT1中断服务函数，执行红外接收及解码 */
  83          void EXINT1_ISR() interrupt 2
  84          {
  85   1          uint8 i, j;
  86   1          uint8 byt;
  87   1          uint16 time;
  88   1          
  89   1          //接收并判定引导码的9ms低电平
  90   1          time = GetLowTime();
  91   1          if ((time<7833) || (time>8755))  //时间判定范围为8.5～9.5ms，
  92   1          {                                //超过此范围则说明为误码，直接退出
  93   2              IE1 = 0;   //退出前清零INT1中断标志
  94   2              return;
  95   2          }
  96   1          //接收并判定引导码的4.5ms高电平
  97   1          time = GetHighTime();
  98   1          if ((time<3686) || (time>4608))  //时间判定范围为4.0～5.0ms，
  99   1          {                                //超过此范围则说明为误码，直接退出
 100   2              IE1 = 0;
 101   2              return;
 102   2          }
 103   1          //接收并判定后续的4字节数据
 104   1          for (i=0; i<4; i++)  //循环接收4个字节
 105   1          {
 106   2              for (j=0; j<8; j++)  //循环接收判定每字节的8个bit
 107   2              {
 108   3                  //接收判定每bit的560us低电平
 109   3                  time = GetLowTime();
 110   3                  if ((time<313) || (time>718)) //时间判定范围为340～780us，
 111   3                  {                             //超过此范围则说明为误码，直接退出
 112   4                      IE1 = 0;
 113   4                      return;
 114   4                  }
 115   3                  //接收每bit高电平时间，判定该bit的值
 116   3                  time = GetHighTime();
C51 COMPILER V9.59.0.0   INFRARED                                                          12/02/2022 16:26:28 PAGE 3   

 117   3                  if ((time>313) && (time<718)) //时间判定范围为340～780us，
 118   3                  {                             //在此范围内说明该bit值为0
 119   4                      byt >>= 1;   //因低位在先，所以数据右移，高位为0
 120   4                  }
 121   3                  else if ((time>1345) && (time<1751)) //时间判定范围为1460～1900us，
 122   3                  {                                    //在此范围内说明该bit值为1
 123   4                      byt >>= 1;   //因低位在先，所以数据右移，
 124   4                      byt |= 0x80; //高位置1
 125   4                  }
 126   3                  else  //不在上述范围内则说明为误码，直接退出
 127   3                  {
 128   4                      IE1 = 0;
 129   4                      return;
 130   4                  }
 131   3              }
 132   2              ircode[i] = byt;  //接收完一个字节后保存到缓冲区
 133   2          }
 134   1          irflag = 1;  //接收完毕后设置标志
 135   1          IE1 = 0;     //退出前清零INT1中断标志
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    372    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
