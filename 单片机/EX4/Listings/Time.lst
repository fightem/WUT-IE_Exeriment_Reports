C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIME
OBJECT MODULE PLACED IN .\Objects\Time.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE source\Time.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\Time.lst) TABS(2) OBJECT(.\Objects\Time.obj)

line level    source

   1          #define  _TIME_C
   2          #include "config.h"
   3          #include "DS1302.h"
   4          #include "LedBuzzer.h"
   5          #include "Lcd1602.h"
   6          #include "Time.h"
   7          #include "main.h"
   8          
   9          uint8 code WeekMod[] = {  //星期X字符图片表
  10              0xFF,0x81,0xBD,0xBD,0x81,0xBD,0xBD,0x81,  //星期日
  11              0xFF,0xFF,0xFF,0x00,0xFF,0xFF,0xFF,0xFF,  //星期一
  12              0xFF,0xFF,0xC3,0xFF,0xFF,0x81,0xFF,0xFF,  //星期二
  13              0xFF,0xC3,0xFF,0xC3,0xFF,0x81,0xFF,0xFF,  //星期三
  14              0xFF,0x00,0x5A,0x5A,0x5A,0x7E,0x00,0xFF,  //星期四
  15              0xFF,0x81,0xF7,0xC1,0xD7,0xD7,0x81,0xFF,  //星期五
  16              0xFF,0xF7,0xFF,0x81,0xFF,0xDB,0xBD,0xFF,  //星期六
  17          };
  18          
  19          bit staMute = 0;  //静音标志位
  20          uint8 AlarmHour = 0x07;  //闹钟时间的小时数
  21          uint8 AlarmMin  = 0x30;  //闹钟时间的分钟数
  22          struct sTime CurTime;    //当前日期时间
  23          
  24          uint8 SetIndex = 0;  //设置位索引
  25          uint8 pdata SetAlarmHour;    //闹钟小时数设置缓冲
  26          uint8 pdata SetAlarmMin;     //闹钟分钟数设置缓冲
  27          struct sTime pdata SetTime;  //日期时间设置缓冲区
  28          
  29          /* 获取当前日期时间，并刷新时间和星期的显示 */
  30          void RefreshTime()
  31          {
  32   1          GetRealTime(&CurTime);                  //获取当前日期时间
  33   1          ShowLedNumber(5, CurTime.hour>>4, 0);   //时
  34   1          ShowLedNumber(4, CurTime.hour&0xF,1);
  35   1          ShowLedNumber(3, CurTime.min>>4,  0);   //分
  36   1          ShowLedNumber(2, CurTime.min&0xF, 1);
  37   1          ShowLedNumber(1, CurTime.sec>>4,  0);   //秒
  38   1          ShowLedNumber(0, CurTime.sec&0xF, 0);
  39   1          ShowLedArray(WeekMod + CurTime.week*8); //星期
  40   1      }
  41          /* 日期刷新函数，ops-刷新选项：为0时只当日期变化才刷新，非0则立即刷新 */
  42          void RefreshDate(uint8 ops)
  43          {
  44   1          uint8 pdata str[12];
  45   1          static uint8 backup = 0;
  46   1          
  47   1          if ((backup!=CurTime.day) || (ops!=0))
  48   1          {
  49   2              str[0] = ((CurTime.year>>12) & 0xF) + '0';  //4位数年份
  50   2              str[1] = ((CurTime.year>>8) & 0xF) + '0';
  51   2              str[2] = ((CurTime.year>>4) & 0xF) + '0';
  52   2              str[3] = (CurTime.year & 0xF) + '0';
  53   2              str[4] = '-';                        //分隔符
  54   2              str[5] = (CurTime.mon >> 4) + '0';   //月份
C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 2   

  55   2              str[6] = (CurTime.mon & 0xF) + '0';
  56   2              str[7] = '-';                        //分隔符
  57   2              str[8] = (CurTime.day >> 4) + '0';   //日期
  58   2              str[9] = (CurTime.day & 0xF) + '0';
  59   2              str[10] = '\0';         //字符串结束符
  60   2              LcdShowStr(0, 0, str);  //显示到液晶上
  61   2              backup = CurTime.day;   //刷新上次日期值
  62   2          }
  63   1      }
  64          /* 刷新闹钟时间的显示 */
  65          void RefreshAlarm()
  66          {
  67   1          uint8 pdata str[8];
  68   1          
  69   1          LcdShowStr(0, 1, "Alarm at ");     //显示提示标题
  70   1          str[0] = (AlarmHour >> 4) + '0';   //闹钟小时数
  71   1          str[1] = (AlarmHour & 0xF) + '0';
  72   1          str[2] = ':';                      //分隔符
  73   1          str[3] = (AlarmMin >> 4) + '0';    //闹钟分钟数
  74   1          str[4] = (AlarmMin & 0xF) + '0';
  75   1          str[5] = '\0';                     //字符串结束符
  76   1          LcdShowStr(9, 1, str);             //显示到液晶上
  77   1      }
  78          /* 闹钟监控函数，抵达设定的闹钟时间时执行闹铃 */
  79          void AlarmMonitor()
  80          {
  81   1          if ((CurTime.hour==AlarmHour) && (CurTime.min==AlarmMin)) //检查时间匹配
  82   1          {
  83   2              if (!staMute)  //检查是否静音
  84   2                  staBuzzer = ~staBuzzer;  //实现蜂鸣器断续鸣叫
  85   2              else
  86   2                  staBuzzer = 0;
  87   2          }
  88   1          else
  89   1          {
  90   2              staMute = 0;
  91   2              staBuzzer = 0;
  92   2          }
  93   1      }
  94          /* 将设置时间及标题提示显示到液晶上 */
  95          void ShowSetTime()
  96          {
  97   1          uint8 pdata str[18];
  98   1          
  99   1          str[0]  = ((SetTime.year>>4) & 0xF) + '0';  //2位数年份
 100   1          str[1]  = (SetTime.year & 0xF) + '0';
 101   1          str[2]  = '-';
 102   1          str[3]  = (SetTime.mon >> 4) + '0';   //月份
 103   1          str[4]  = (SetTime.mon & 0xF) + '0';
 104   1          str[5]  = '-';
 105   1          str[6]  = (SetTime.day >> 4) + '0';   //日期
 106   1          str[7]  = (SetTime.day & 0xF) + '0';
 107   1          str[8]  = '-';
 108   1          str[9]  = (SetTime.week & 0xF) + '0'; //星期
 109   1          str[10] = ' ';
 110   1          str[11] = (SetTime.hour >> 4) + '0';  //小时
 111   1          str[12] = (SetTime.hour & 0xF) + '0';
 112   1          str[13] = ':';
 113   1          str[14] = (SetTime.min >> 4) + '0';   //分钟
 114   1          str[15] = (SetTime.min & 0xF) + '0';
 115   1          str[16] = '\0';
 116   1          LcdShowStr(0, 0, "Please Set Time");  //显示提示标题
C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 3   

 117   1          LcdShowStr(0, 1, str);              //显示设置时间值
 118   1      }
 119          /* 将设置闹钟及标题提示显示到液晶上 */
 120          void ShowSetAlarm()
 121          {
 122   1          uint8 pdata str[8];
 123   1          
 124   1          str[0] = (SetAlarmHour >> 4) + '0';   //小时
 125   1          str[1] = (SetAlarmHour & 0xF) + '0';
 126   1          str[2] = ':';
 127   1          str[3] = (SetAlarmMin >> 4) + '0';    //分钟
 128   1          str[4] = (SetAlarmMin & 0xF) + '0';
 129   1          str[5] = '\0';
 130   1          LcdShowStr(0, 0, "Set Alarm");  //显示提示标题
 131   1          LcdShowStr(0, 1, str);          //显示设定闹钟值
 132   1      }
 133          /* 取消当前设置，返回正常运行状态 */
 134          void CancelCurSet()
 135          {
 136   1          staSystem = E_NORMAL;
 137   1          LcdCloseCursor();  //关闭光标
 138   1          LcdClearScreen();  //液晶清屏
 139   1          RefreshTime();   //刷新当前时间
 140   1          RefreshDate(1);  //立即刷新日期显示
 141   1          RefreshTemp(1);  //立即刷新温度显示
 142   1          RefreshAlarm();  //闹钟设定值显示
 143   1      }
 144          /* 时间或闹钟设置时，设置位右移一位，到头后折回 */
 145          void SetRightShift()
 146          {
 147   1          if (staSystem == E_SET_TIME)
 148   1          {
 149   2              switch (SetIndex)
 150   2              {
 151   3                  case 0: SetIndex=1;  LcdSetCursor(1, 1); break;
 152   3                  case 1: SetIndex=2;  LcdSetCursor(3, 1); break;
 153   3                  case 2: SetIndex=3;  LcdSetCursor(4, 1); break;
 154   3                  case 3: SetIndex=4;  LcdSetCursor(6, 1); break;
 155   3                  case 4: SetIndex=5;  LcdSetCursor(7, 1); break;
 156   3                  case 5: SetIndex=6;  LcdSetCursor(9, 1); break;
 157   3                  case 6: SetIndex=7;  LcdSetCursor(11,1); break;
 158   3                  case 7: SetIndex=8;  LcdSetCursor(12,1); break;
 159   3                  case 8: SetIndex=9;  LcdSetCursor(14,1); break;
 160   3                  case 9: SetIndex=10; LcdSetCursor(15,1); break;
 161   3                  default: SetIndex=0; LcdSetCursor(0, 1); break;
 162   3              }
 163   2          }
 164   1          else if (staSystem == E_SET_ALARM)
 165   1          {
 166   2              switch (SetIndex)
 167   2              {
 168   3                  case 0: SetIndex=1;  LcdSetCursor(1,1); break;
 169   3                  case 1: SetIndex=2;  LcdSetCursor(3,1); break;
 170   3                  case 2: SetIndex=3;  LcdSetCursor(4,1); break;
 171   3                  default: SetIndex=0; LcdSetCursor(0,1); break;
 172   3              }
 173   2          }
 174   1      }
 175          /* 时间或闹钟设置时，设置位左移一位，到头后折回 */
 176          void SetLeftShift()
 177          {
 178   1          if (staSystem == E_SET_TIME)
C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 4   

 179   1          {
 180   2              switch (SetIndex)
 181   2              {
 182   3                  case 0: SetIndex=10; LcdSetCursor(15,1); break;
 183   3                  case 1: SetIndex=0;  LcdSetCursor(0, 1); break;
 184   3                  case 2: SetIndex=1;  LcdSetCursor(1, 1); break;
 185   3                  case 3: SetIndex=2;  LcdSetCursor(3, 1); break;
 186   3                  case 4: SetIndex=3;  LcdSetCursor(4, 1); break;
 187   3                  case 5: SetIndex=4;  LcdSetCursor(6, 1); break;
 188   3                  case 6: SetIndex=5;  LcdSetCursor(7, 1); break;
 189   3                  case 7: SetIndex=6;  LcdSetCursor(9, 1); break;
 190   3                  case 8: SetIndex=7;  LcdSetCursor(11,1); break;
 191   3                  case 9: SetIndex=8;  LcdSetCursor(12,1); break;
 192   3                  default: SetIndex=9; LcdSetCursor(14,1); break;
 193   3              }
 194   2          }
 195   1          else if (staSystem == E_SET_ALARM)
 196   1          {
 197   2              switch (SetIndex)
 198   2              {
 199   3                  case 0: SetIndex=3;  LcdSetCursor(4,1); break;
 200   3                  case 1: SetIndex=0;  LcdSetCursor(0,1); break;
 201   3                  case 2: SetIndex=1;  LcdSetCursor(1,1); break;
 202   3                  default: SetIndex=2; LcdSetCursor(3,1); break;
 203   3              }
 204   2          }
 205   1      }
 206          /* 输入设置数字，修改对应的设置位，并显示该数字，ascii-输入数字的ASCII码 */
 207          void InputSetNumber(uint8 ascii)
 208          {
 209   1          uint8 num;
 210   1          
 211   1          num = ascii - '0';
 212   1          if (num <= 9)  //只响应0～9的数字
 213   1          {
 214   2              if (staSystem == E_SET_TIME)
 215   2              {
 216   3                  switch (SetIndex)
 217   3                  {
 218   4                      case 0: SetTime.year = (SetTime.year&0xFF0F)|(num<<4);
 219   4                              LcdShowChar(0, 1, ascii);  break;      //年份高位数字
 220   4                      case 1: SetTime.year = (SetTime.year&0xFFF0)|(num);
 221   4                              LcdShowChar(1, 1, ascii);  break;      //年份低位数字
 222   4                      case 2: SetTime.mon = (SetTime.mon&0x0F)|(num<<4);
 223   4                              LcdShowChar(3, 1, ascii);  break;      //月份高位数字
 224   4                      case 3: SetTime.mon = (SetTime.mon&0xF0)|(num);
 225   4                              LcdShowChar(4, 1, ascii);  break;      //月份低位数字
 226   4                      case 4: SetTime.day = (SetTime.day&0x0F)|(num<<4);
 227   4                              LcdShowChar(6, 1, ascii);  break;      //日期高位数字
 228   4                      case 5: SetTime.day = (SetTime.day&0xF0)|(num);
 229   4                              LcdShowChar(7, 1, ascii);  break;      //日期低位数字
 230   4                      case 6: SetTime.week = (SetTime.week&0xF0)|(num);
 231   4                              LcdShowChar(9, 1, ascii);  break;      //星期数字
 232   4                      case 7: SetTime.hour = (SetTime.hour&0x0F)|(num<<4);
 233   4                              LcdShowChar(11,1, ascii);  break;      //小时高位数字
 234   4                      case 8: SetTime.hour = (SetTime.hour&0xF0)|(num);
 235   4                              LcdShowChar(12,1, ascii);  break;      //小时低位数字
 236   4                      case 9: SetTime.min = (SetTime.min&0x0F)|(num<<4);
 237   4                              LcdShowChar(14,1, ascii);  break;      //分钟高位数字
 238   4                      default:SetTime.min = (SetTime.min&0xF0)|(num);
 239   4                              LcdShowChar(15,1, ascii);  break;      //分钟低位数字
 240   4                  }
C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 5   

 241   3                  SetRightShift();  //完成该位设置后自动右移
 242   3              }
 243   2              else if (staSystem == E_SET_ALARM)
 244   2              {
 245   3                  switch (SetIndex)
 246   3                  {
 247   4                      case 0: SetAlarmHour = (SetAlarmHour&0x0F) | (num<<4);
 248   4                              LcdShowChar(0,1, ascii); break;      //小时高位数字
 249   4                      case 1: SetAlarmHour = (SetAlarmHour&0xF0) | (num);
 250   4                              LcdShowChar(1,1, ascii); break;      //小时低位数字
 251   4                      case 2: SetAlarmMin = (SetAlarmMin&0x0F) | (num<<4);
 252   4                              LcdShowChar(3,1, ascii); break;      //分钟高位数字
 253   4                      default:SetAlarmMin = (SetAlarmMin&0xF0) | (num);
 254   4                              LcdShowChar(4,1, ascii); break;      //分钟低位数字
 255   4                  }
 256   3                  SetRightShift();  //完成该位设置后自动右移
 257   3              }
 258   2          }
 259   1      }
 260          /* 切换系统运行状态 */
 261          void SwitchSystemSta()
 262          {
 263   1          if (staSystem == E_NORMAL)  //正常运行切换到时间设置
 264   1          {
 265   2              staSystem = E_SET_TIME;
 266   2              SetTime.year = CurTime.year;  //当前时间拷贝到时间设置缓冲区中
 267   2              SetTime.mon  = CurTime.mon;
 268   2              SetTime.day  = CurTime.day;
 269   2              SetTime.hour = CurTime.hour;
 270   2              SetTime.min  = CurTime.min;
 271   2              SetTime.sec  = CurTime.sec;
 272   2              SetTime.week = CurTime.week;
 273   2              LcdClearScreen();  //液晶清屏
 274   2              ShowSetTime();     //显示设置时间
 275   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 276   2              SetRightShift();
 277   2              LcdOpenCursor();   //开启光标
 278   2          }
 279   1          else if (staSystem == E_SET_TIME)  //时间设置切换到闹钟设置
 280   1          {
 281   2              staSystem = E_SET_ALARM;
 282   2              SetTime.sec = 0;          //秒清零，即当设置时间后从0秒开始走时
 283   2              SetRealTime(&SetTime);    //设定时间写入实时时钟
 284   2              SetAlarmHour = AlarmHour; //当前闹钟值拷贝到设置缓冲区
 285   2              SetAlarmMin  = AlarmMin;
 286   2              LcdClearScreen();  //液晶清屏
 287   2              ShowSetAlarm();    //显示设置闹钟
 288   2              SetIndex = 255;    //与接下来的右移一起将光标设在最左边的位置上
 289   2              SetRightShift();
 290   2          }
 291   1          else  //闹钟设置切换会正常运行
 292   1          {
 293   2              staSystem = E_NORMAL;
 294   2              AlarmHour = SetAlarmHour;  //设定的闹钟值写入闹钟时间
 295   2              AlarmMin  = SetAlarmMin;
 296   2              LcdCloseCursor();  //关闭光标
 297   2              LcdClearScreen();  //液晶清屏
 298   2              RefreshTime();   //刷新当前时间
 299   2              RefreshDate(1);  //立即刷新日期显示
 300   2              RefreshTemp(1);  //立即刷新温度显示
 301   2              RefreshAlarm();  //闹钟设定值显示
 302   2          }
C51 COMPILER V9.59.0.0   TIME                                                              12/02/2022 16:26:29 PAGE 6   

 303   1      }
 304          /* 按键动作函数，根据键码执行相应的操作，keycode-按键键码 */
 305          void KeyAction(uint8 keycode)
 306          {
 307   1          if  ((keycode>='0') && (keycode<='9'))  //数字键输入当前位设定值
 308   1          {
 309   2              InputSetNumber(keycode);
 310   2          }
 311   1          else if (keycode == 0x25)  //向左键，向左切换设置位
 312   1          {
 313   2              SetLeftShift();
 314   2          }
 315   1          else if (keycode == 0x27)  //向右键，向右切换设置位
 316   1          {
 317   2              SetRightShift();
 318   2          }
 319   1          else if (keycode == 0x0D)  //回车键，切换运行状态/保存设置
 320   1          {
 321   2              SwitchSystemSta();
 322   2          }
 323   1          else if (keycode == 0x1B)  //Esc键，静音/取消当前设置
 324   1          {
 325   2              if (staSystem == E_NORMAL) //处于正常运行状态时闹铃静音
 326   2              {
 327   3                  staMute = 1;
 328   3              }
 329   2              else                       //处于设置状态时退出设置
 330   2              {
 331   3                  CancelCurSet();
 332   3              }
 333   2          }
 334   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1558    ----
   CONSTANT SIZE    =     92    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     10      46
   DATA SIZE        =     12       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
