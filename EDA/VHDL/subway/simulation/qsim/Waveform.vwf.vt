// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2022 23:11:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    subway
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module subway_vlg_sample_tst(
	cancel,
	clk,
	insert_start,
	money,
	numbers,
	select_start,
	station,
	sampler_tx
);
input  cancel;
input  clk;
input  insert_start;
input [3:0] money;
input [2:0] numbers;
input  select_start;
input [4:0] station;
output sampler_tx;

reg sample;
time current_time;
always @(cancel or clk or insert_start or money or numbers or select_start or station)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module subway_vlg_check_tst (
	change_gate,
	change_num,
	ticket_gate,
	ticket_num,
	sampler_rx
);
input  change_gate;
input [4:0] change_num;
input  ticket_gate;
input [2:0] ticket_num;
input sampler_rx;

reg  change_gate_expected;
reg [4:0] change_num_expected;
reg  ticket_gate_expected;
reg [2:0] ticket_num_expected;

reg  change_gate_prev;
reg [4:0] change_num_prev;
reg  ticket_gate_prev;
reg [2:0] ticket_num_prev;

reg  change_gate_expected_prev;
reg [4:0] change_num_expected_prev;
reg  ticket_gate_expected_prev;
reg [2:0] ticket_num_expected_prev;

reg  last_change_gate_exp;
reg [4:0] last_change_num_exp;
reg  last_ticket_gate_exp;
reg [2:0] last_ticket_num_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	change_gate_prev = change_gate;
	change_num_prev = change_num;
	ticket_gate_prev = ticket_gate;
	ticket_num_prev = ticket_num;
end

// update expected /o prevs

always @(trigger)
begin
	change_gate_expected_prev = change_gate_expected;
	change_num_expected_prev = change_num_expected;
	ticket_gate_expected_prev = ticket_gate_expected;
	ticket_num_expected_prev = ticket_num_expected;
end



// expected ticket_gate
initial
begin
	ticket_gate_expected = 1'bX;
end 
// expected ticket_num[ 2 ]
initial
begin
	ticket_num_expected[2] = 1'bX;
end 
// expected ticket_num[ 1 ]
initial
begin
	ticket_num_expected[1] = 1'bX;
end 
// expected ticket_num[ 0 ]
initial
begin
	ticket_num_expected[0] = 1'bX;
end 

// expected change_gate
initial
begin
	change_gate_expected = 1'bX;
end 
// expected change_num[ 4 ]
initial
begin
	change_num_expected[4] = 1'bX;
end 
// expected change_num[ 3 ]
initial
begin
	change_num_expected[3] = 1'bX;
end 
// expected change_num[ 2 ]
initial
begin
	change_num_expected[2] = 1'bX;
end 
// expected change_num[ 1 ]
initial
begin
	change_num_expected[1] = 1'bX;
end 
// expected change_num[ 0 ]
initial
begin
	change_num_expected[0] = 1'bX;
end 
// generate trigger
always @(change_gate_expected or change_gate or change_num_expected or change_num or ticket_gate_expected or ticket_gate or ticket_num_expected or ticket_num)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected change_gate = %b | expected change_num = %b | expected ticket_gate = %b | expected ticket_num = %b | ",change_gate_expected_prev,change_num_expected_prev,ticket_gate_expected_prev,ticket_num_expected_prev);
	$display("| real change_gate = %b | real change_num = %b | real ticket_gate = %b | real ticket_num = %b | ",change_gate_prev,change_num_prev,ticket_gate_prev,ticket_num_prev);
`endif
	if (
		( change_gate_expected_prev !== 1'bx ) && ( change_gate_prev !== change_gate_expected_prev )
		&& ((change_gate_expected_prev !== last_change_gate_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_gate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_gate_expected_prev);
		$display ("     Real value = %b", change_gate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_change_gate_exp = change_gate_expected_prev;
	end
	if (
		( change_num_expected_prev[0] !== 1'bx ) && ( change_num_prev[0] !== change_num_expected_prev[0] )
		&& ((change_num_expected_prev[0] !== last_change_num_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_num_expected_prev);
		$display ("     Real value = %b", change_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_change_num_exp[0] = change_num_expected_prev[0];
	end
	if (
		( change_num_expected_prev[1] !== 1'bx ) && ( change_num_prev[1] !== change_num_expected_prev[1] )
		&& ((change_num_expected_prev[1] !== last_change_num_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_num_expected_prev);
		$display ("     Real value = %b", change_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_change_num_exp[1] = change_num_expected_prev[1];
	end
	if (
		( change_num_expected_prev[2] !== 1'bx ) && ( change_num_prev[2] !== change_num_expected_prev[2] )
		&& ((change_num_expected_prev[2] !== last_change_num_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_num_expected_prev);
		$display ("     Real value = %b", change_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_change_num_exp[2] = change_num_expected_prev[2];
	end
	if (
		( change_num_expected_prev[3] !== 1'bx ) && ( change_num_prev[3] !== change_num_expected_prev[3] )
		&& ((change_num_expected_prev[3] !== last_change_num_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_num_expected_prev);
		$display ("     Real value = %b", change_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_change_num_exp[3] = change_num_expected_prev[3];
	end
	if (
		( change_num_expected_prev[4] !== 1'bx ) && ( change_num_prev[4] !== change_num_expected_prev[4] )
		&& ((change_num_expected_prev[4] !== last_change_num_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port change_num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", change_num_expected_prev);
		$display ("     Real value = %b", change_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_change_num_exp[4] = change_num_expected_prev[4];
	end
	if (
		( ticket_gate_expected_prev !== 1'bx ) && ( ticket_gate_prev !== ticket_gate_expected_prev )
		&& ((ticket_gate_expected_prev !== last_ticket_gate_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ticket_gate :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ticket_gate_expected_prev);
		$display ("     Real value = %b", ticket_gate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ticket_gate_exp = ticket_gate_expected_prev;
	end
	if (
		( ticket_num_expected_prev[0] !== 1'bx ) && ( ticket_num_prev[0] !== ticket_num_expected_prev[0] )
		&& ((ticket_num_expected_prev[0] !== last_ticket_num_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ticket_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ticket_num_expected_prev);
		$display ("     Real value = %b", ticket_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ticket_num_exp[0] = ticket_num_expected_prev[0];
	end
	if (
		( ticket_num_expected_prev[1] !== 1'bx ) && ( ticket_num_prev[1] !== ticket_num_expected_prev[1] )
		&& ((ticket_num_expected_prev[1] !== last_ticket_num_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ticket_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ticket_num_expected_prev);
		$display ("     Real value = %b", ticket_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ticket_num_exp[1] = ticket_num_expected_prev[1];
	end
	if (
		( ticket_num_expected_prev[2] !== 1'bx ) && ( ticket_num_prev[2] !== ticket_num_expected_prev[2] )
		&& ((ticket_num_expected_prev[2] !== last_ticket_num_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ticket_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ticket_num_expected_prev);
		$display ("     Real value = %b", ticket_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ticket_num_exp[2] = ticket_num_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module subway_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cancel;
reg clk;
reg insert_start;
reg [3:0] money;
reg [2:0] numbers;
reg select_start;
reg [4:0] station;
// wires                                               
wire change_gate;
wire [4:0] change_num;
wire ticket_gate;
wire [2:0] ticket_num;

wire sampler;                             

// assign statements (if any)                          
subway i1 (
// port map - connection between master ports and signals/registers   
	.cancel(cancel),
	.change_gate(change_gate),
	.change_num(change_num),
	.clk(clk),
	.insert_start(insert_start),
	.money(money),
	.numbers(numbers),
	.select_start(select_start),
	.station(station),
	.ticket_gate(ticket_gate),
	.ticket_num(ticket_num)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// select_start
initial
begin
	select_start = 1'b0;
	select_start = #50000 1'b1;
	select_start = #20000 1'b0;
end 
// station[ 4 ]
initial
begin
	station[4] = 1'b0;
end 
// station[ 3 ]
initial
begin
	station[3] = 1'b0;
	station[3] = #110000 1'b1;
	station[3] = #20000 1'b0;
end 
// station[ 2 ]
initial
begin
	station[2] = 1'b0;
end 
// station[ 1 ]
initial
begin
	station[1] = 1'b0;
	station[1] = #110000 1'b1;
	station[1] = #20000 1'b0;
end 
// station[ 0 ]
initial
begin
	station[0] = 1'b0;
end 
// numbers[ 2 ]
initial
begin
	numbers[2] = 1'b0;
end 
// numbers[ 1 ]
initial
begin
	numbers[1] = 1'b0;
	numbers[1] = #150000 1'b1;
	numbers[1] = #20000 1'b0;
end 
// numbers[ 0 ]
initial
begin
	numbers[0] = 1'b0;
	numbers[0] = #150000 1'b1;
	numbers[0] = #20000 1'b0;
end 

// insert_start
initial
begin
	insert_start = 1'b0;
	insert_start = #190000 1'b1;
	insert_start = #20000 1'b0;
end 
// money[ 3 ]
initial
begin
	money[3] = 1'b0;
	money[3] = #230000 1'b1;
	money[3] = #20000 1'b0;
end 
// money[ 2 ]
initial
begin
	money[2] = 1'b0;
end 
// money[ 1 ]
initial
begin
	money[1] = 1'b0;
	money[1] = #230000 1'b1;
	money[1] = #20000 1'b0;
end 
// money[ 0 ]
initial
begin
	money[0] = 1'b0;
end 

// cancel
initial
begin
	cancel = 1'b0;
	cancel = #240000 1'b1;
	cancel = #20000 1'b0;
end 

subway_vlg_sample_tst tb_sample (
	.cancel(cancel),
	.clk(clk),
	.insert_start(insert_start),
	.money(money),
	.numbers(numbers),
	.select_start(select_start),
	.station(station),
	.sampler_tx(sampler)
);

subway_vlg_check_tst tb_out(
	.change_gate(change_gate),
	.change_num(change_num),
	.ticket_gate(ticket_gate),
	.ticket_num(ticket_num),
	.sampler_rx(sampler)
);
endmodule

