// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2022 11:56:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Jiaotong_Lights
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Jiaotong_Lights_vlg_sample_tst(
	clk,
	ctr,
	sampler_tx
);
input  clk;
input  ctr;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ctr)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Jiaotong_Lights_vlg_check_tst (
	branchroad_lights,
	branchroad_time_BCD,
	cnt,
	mainroad_lights,
	mainroad_time_BCD,
	sampler_rx
);
input [2:0] branchroad_lights;
input [7:0] branchroad_time_BCD;
input [6:0] cnt;
input [2:0] mainroad_lights;
input [7:0] mainroad_time_BCD;
input sampler_rx;

reg [2:0] branchroad_lights_expected;
reg [7:0] branchroad_time_BCD_expected;
reg [6:0] cnt_expected;
reg [2:0] mainroad_lights_expected;
reg [7:0] mainroad_time_BCD_expected;

reg [2:0] branchroad_lights_prev;
reg [7:0] branchroad_time_BCD_prev;
reg [6:0] cnt_prev;
reg [2:0] mainroad_lights_prev;
reg [7:0] mainroad_time_BCD_prev;

reg [2:0] branchroad_lights_expected_prev;
reg [7:0] branchroad_time_BCD_expected_prev;
reg [6:0] cnt_expected_prev;
reg [2:0] mainroad_lights_expected_prev;
reg [7:0] mainroad_time_BCD_expected_prev;

reg [2:0] last_branchroad_lights_exp;
reg [7:0] last_branchroad_time_BCD_exp;
reg [6:0] last_cnt_exp;
reg [2:0] last_mainroad_lights_exp;
reg [7:0] last_mainroad_time_BCD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	branchroad_lights_prev = branchroad_lights;
	branchroad_time_BCD_prev = branchroad_time_BCD;
	cnt_prev = cnt;
	mainroad_lights_prev = mainroad_lights;
	mainroad_time_BCD_prev = mainroad_time_BCD;
end

// update expected /o prevs

always @(trigger)
begin
	branchroad_lights_expected_prev = branchroad_lights_expected;
	branchroad_time_BCD_expected_prev = branchroad_time_BCD_expected;
	cnt_expected_prev = cnt_expected;
	mainroad_lights_expected_prev = mainroad_lights_expected;
	mainroad_time_BCD_expected_prev = mainroad_time_BCD_expected;
end


// expected branchroad_lights[ 2 ]
initial
begin
	branchroad_lights_expected[2] = 1'bX;
end 
// expected branchroad_lights[ 1 ]
initial
begin
	branchroad_lights_expected[1] = 1'bX;
end 
// expected branchroad_lights[ 0 ]
initial
begin
	branchroad_lights_expected[0] = 1'bX;
end 
// expected branchroad_time_BCD[ 7 ]
initial
begin
	branchroad_time_BCD_expected[7] = 1'bX;
end 
// expected branchroad_time_BCD[ 6 ]
initial
begin
	branchroad_time_BCD_expected[6] = 1'bX;
end 
// expected branchroad_time_BCD[ 5 ]
initial
begin
	branchroad_time_BCD_expected[5] = 1'bX;
end 
// expected branchroad_time_BCD[ 4 ]
initial
begin
	branchroad_time_BCD_expected[4] = 1'bX;
end 
// expected branchroad_time_BCD[ 3 ]
initial
begin
	branchroad_time_BCD_expected[3] = 1'bX;
end 
// expected branchroad_time_BCD[ 2 ]
initial
begin
	branchroad_time_BCD_expected[2] = 1'bX;
end 
// expected branchroad_time_BCD[ 1 ]
initial
begin
	branchroad_time_BCD_expected[1] = 1'bX;
end 
// expected branchroad_time_BCD[ 0 ]
initial
begin
	branchroad_time_BCD_expected[0] = 1'bX;
end 
// expected cnt[ 6 ]
initial
begin
	cnt_expected[6] = 1'bX;
end 
// expected cnt[ 5 ]
initial
begin
	cnt_expected[5] = 1'bX;
end 
// expected cnt[ 4 ]
initial
begin
	cnt_expected[4] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 
// expected mainroad_lights[ 2 ]
initial
begin
	mainroad_lights_expected[2] = 1'bX;
end 
// expected mainroad_lights[ 1 ]
initial
begin
	mainroad_lights_expected[1] = 1'bX;
end 
// expected mainroad_lights[ 0 ]
initial
begin
	mainroad_lights_expected[0] = 1'bX;
end 
// expected mainroad_time_BCD[ 7 ]
initial
begin
	mainroad_time_BCD_expected[7] = 1'bX;
end 
// expected mainroad_time_BCD[ 6 ]
initial
begin
	mainroad_time_BCD_expected[6] = 1'bX;
end 
// expected mainroad_time_BCD[ 5 ]
initial
begin
	mainroad_time_BCD_expected[5] = 1'bX;
end 
// expected mainroad_time_BCD[ 4 ]
initial
begin
	mainroad_time_BCD_expected[4] = 1'bX;
end 
// expected mainroad_time_BCD[ 3 ]
initial
begin
	mainroad_time_BCD_expected[3] = 1'bX;
end 
// expected mainroad_time_BCD[ 2 ]
initial
begin
	mainroad_time_BCD_expected[2] = 1'bX;
end 
// expected mainroad_time_BCD[ 1 ]
initial
begin
	mainroad_time_BCD_expected[1] = 1'bX;
end 
// expected mainroad_time_BCD[ 0 ]
initial
begin
	mainroad_time_BCD_expected[0] = 1'bX;
end 
// generate trigger
always @(branchroad_lights_expected or branchroad_lights or branchroad_time_BCD_expected or branchroad_time_BCD or cnt_expected or cnt or mainroad_lights_expected or mainroad_lights or mainroad_time_BCD_expected or mainroad_time_BCD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected branchroad_lights = %b | expected branchroad_time_BCD = %b | expected cnt = %b | expected mainroad_lights = %b | expected mainroad_time_BCD = %b | ",branchroad_lights_expected_prev,branchroad_time_BCD_expected_prev,cnt_expected_prev,mainroad_lights_expected_prev,mainroad_time_BCD_expected_prev);
	$display("| real branchroad_lights = %b | real branchroad_time_BCD = %b | real cnt = %b | real mainroad_lights = %b | real mainroad_time_BCD = %b | ",branchroad_lights_prev,branchroad_time_BCD_prev,cnt_prev,mainroad_lights_prev,mainroad_time_BCD_prev);
`endif
	if (
		( branchroad_lights_expected_prev[0] !== 1'bx ) && ( branchroad_lights_prev[0] !== branchroad_lights_expected_prev[0] )
		&& ((branchroad_lights_expected_prev[0] !== last_branchroad_lights_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_lights[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_lights_expected_prev);
		$display ("     Real value = %b", branchroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branchroad_lights_exp[0] = branchroad_lights_expected_prev[0];
	end
	if (
		( branchroad_lights_expected_prev[1] !== 1'bx ) && ( branchroad_lights_prev[1] !== branchroad_lights_expected_prev[1] )
		&& ((branchroad_lights_expected_prev[1] !== last_branchroad_lights_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_lights[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_lights_expected_prev);
		$display ("     Real value = %b", branchroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branchroad_lights_exp[1] = branchroad_lights_expected_prev[1];
	end
	if (
		( branchroad_lights_expected_prev[2] !== 1'bx ) && ( branchroad_lights_prev[2] !== branchroad_lights_expected_prev[2] )
		&& ((branchroad_lights_expected_prev[2] !== last_branchroad_lights_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_lights[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_lights_expected_prev);
		$display ("     Real value = %b", branchroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_branchroad_lights_exp[2] = branchroad_lights_expected_prev[2];
	end
	if (
		( branchroad_time_BCD_expected_prev[0] !== 1'bx ) && ( branchroad_time_BCD_prev[0] !== branchroad_time_BCD_expected_prev[0] )
		&& ((branchroad_time_BCD_expected_prev[0] !== last_branchroad_time_BCD_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[0] = branchroad_time_BCD_expected_prev[0];
	end
	if (
		( branchroad_time_BCD_expected_prev[1] !== 1'bx ) && ( branchroad_time_BCD_prev[1] !== branchroad_time_BCD_expected_prev[1] )
		&& ((branchroad_time_BCD_expected_prev[1] !== last_branchroad_time_BCD_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[1] = branchroad_time_BCD_expected_prev[1];
	end
	if (
		( branchroad_time_BCD_expected_prev[2] !== 1'bx ) && ( branchroad_time_BCD_prev[2] !== branchroad_time_BCD_expected_prev[2] )
		&& ((branchroad_time_BCD_expected_prev[2] !== last_branchroad_time_BCD_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[2] = branchroad_time_BCD_expected_prev[2];
	end
	if (
		( branchroad_time_BCD_expected_prev[3] !== 1'bx ) && ( branchroad_time_BCD_prev[3] !== branchroad_time_BCD_expected_prev[3] )
		&& ((branchroad_time_BCD_expected_prev[3] !== last_branchroad_time_BCD_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[3] = branchroad_time_BCD_expected_prev[3];
	end
	if (
		( branchroad_time_BCD_expected_prev[4] !== 1'bx ) && ( branchroad_time_BCD_prev[4] !== branchroad_time_BCD_expected_prev[4] )
		&& ((branchroad_time_BCD_expected_prev[4] !== last_branchroad_time_BCD_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[4] = branchroad_time_BCD_expected_prev[4];
	end
	if (
		( branchroad_time_BCD_expected_prev[5] !== 1'bx ) && ( branchroad_time_BCD_prev[5] !== branchroad_time_BCD_expected_prev[5] )
		&& ((branchroad_time_BCD_expected_prev[5] !== last_branchroad_time_BCD_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[5] = branchroad_time_BCD_expected_prev[5];
	end
	if (
		( branchroad_time_BCD_expected_prev[6] !== 1'bx ) && ( branchroad_time_BCD_prev[6] !== branchroad_time_BCD_expected_prev[6] )
		&& ((branchroad_time_BCD_expected_prev[6] !== last_branchroad_time_BCD_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[6] = branchroad_time_BCD_expected_prev[6];
	end
	if (
		( branchroad_time_BCD_expected_prev[7] !== 1'bx ) && ( branchroad_time_BCD_prev[7] !== branchroad_time_BCD_expected_prev[7] )
		&& ((branchroad_time_BCD_expected_prev[7] !== last_branchroad_time_BCD_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branchroad_time_BCD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branchroad_time_BCD_expected_prev);
		$display ("     Real value = %b", branchroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branchroad_time_BCD_exp[7] = branchroad_time_BCD_expected_prev[7];
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[4] !== 1'bx ) && ( cnt_prev[4] !== cnt_expected_prev[4] )
		&& ((cnt_expected_prev[4] !== last_cnt_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[4] = cnt_expected_prev[4];
	end
	if (
		( cnt_expected_prev[5] !== 1'bx ) && ( cnt_prev[5] !== cnt_expected_prev[5] )
		&& ((cnt_expected_prev[5] !== last_cnt_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[5] = cnt_expected_prev[5];
	end
	if (
		( cnt_expected_prev[6] !== 1'bx ) && ( cnt_prev[6] !== cnt_expected_prev[6] )
		&& ((cnt_expected_prev[6] !== last_cnt_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[6] = cnt_expected_prev[6];
	end
	if (
		( mainroad_lights_expected_prev[0] !== 1'bx ) && ( mainroad_lights_prev[0] !== mainroad_lights_expected_prev[0] )
		&& ((mainroad_lights_expected_prev[0] !== last_mainroad_lights_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_lights[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_lights_expected_prev);
		$display ("     Real value = %b", mainroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_mainroad_lights_exp[0] = mainroad_lights_expected_prev[0];
	end
	if (
		( mainroad_lights_expected_prev[1] !== 1'bx ) && ( mainroad_lights_prev[1] !== mainroad_lights_expected_prev[1] )
		&& ((mainroad_lights_expected_prev[1] !== last_mainroad_lights_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_lights[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_lights_expected_prev);
		$display ("     Real value = %b", mainroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_mainroad_lights_exp[1] = mainroad_lights_expected_prev[1];
	end
	if (
		( mainroad_lights_expected_prev[2] !== 1'bx ) && ( mainroad_lights_prev[2] !== mainroad_lights_expected_prev[2] )
		&& ((mainroad_lights_expected_prev[2] !== last_mainroad_lights_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_lights[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_lights_expected_prev);
		$display ("     Real value = %b", mainroad_lights_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_mainroad_lights_exp[2] = mainroad_lights_expected_prev[2];
	end
	if (
		( mainroad_time_BCD_expected_prev[0] !== 1'bx ) && ( mainroad_time_BCD_prev[0] !== mainroad_time_BCD_expected_prev[0] )
		&& ((mainroad_time_BCD_expected_prev[0] !== last_mainroad_time_BCD_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[0] = mainroad_time_BCD_expected_prev[0];
	end
	if (
		( mainroad_time_BCD_expected_prev[1] !== 1'bx ) && ( mainroad_time_BCD_prev[1] !== mainroad_time_BCD_expected_prev[1] )
		&& ((mainroad_time_BCD_expected_prev[1] !== last_mainroad_time_BCD_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[1] = mainroad_time_BCD_expected_prev[1];
	end
	if (
		( mainroad_time_BCD_expected_prev[2] !== 1'bx ) && ( mainroad_time_BCD_prev[2] !== mainroad_time_BCD_expected_prev[2] )
		&& ((mainroad_time_BCD_expected_prev[2] !== last_mainroad_time_BCD_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[2] = mainroad_time_BCD_expected_prev[2];
	end
	if (
		( mainroad_time_BCD_expected_prev[3] !== 1'bx ) && ( mainroad_time_BCD_prev[3] !== mainroad_time_BCD_expected_prev[3] )
		&& ((mainroad_time_BCD_expected_prev[3] !== last_mainroad_time_BCD_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[3] = mainroad_time_BCD_expected_prev[3];
	end
	if (
		( mainroad_time_BCD_expected_prev[4] !== 1'bx ) && ( mainroad_time_BCD_prev[4] !== mainroad_time_BCD_expected_prev[4] )
		&& ((mainroad_time_BCD_expected_prev[4] !== last_mainroad_time_BCD_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[4] = mainroad_time_BCD_expected_prev[4];
	end
	if (
		( mainroad_time_BCD_expected_prev[5] !== 1'bx ) && ( mainroad_time_BCD_prev[5] !== mainroad_time_BCD_expected_prev[5] )
		&& ((mainroad_time_BCD_expected_prev[5] !== last_mainroad_time_BCD_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[5] = mainroad_time_BCD_expected_prev[5];
	end
	if (
		( mainroad_time_BCD_expected_prev[6] !== 1'bx ) && ( mainroad_time_BCD_prev[6] !== mainroad_time_BCD_expected_prev[6] )
		&& ((mainroad_time_BCD_expected_prev[6] !== last_mainroad_time_BCD_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[6] = mainroad_time_BCD_expected_prev[6];
	end
	if (
		( mainroad_time_BCD_expected_prev[7] !== 1'bx ) && ( mainroad_time_BCD_prev[7] !== mainroad_time_BCD_expected_prev[7] )
		&& ((mainroad_time_BCD_expected_prev[7] !== last_mainroad_time_BCD_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mainroad_time_BCD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mainroad_time_BCD_expected_prev);
		$display ("     Real value = %b", mainroad_time_BCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_mainroad_time_BCD_exp[7] = mainroad_time_BCD_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Jiaotong_Lights_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg ctr;
// wires                                               
wire [2:0] branchroad_lights;
wire [7:0] branchroad_time_BCD;
wire [6:0] cnt;
wire [2:0] mainroad_lights;
wire [7:0] mainroad_time_BCD;

wire sampler;                             

// assign statements (if any)                          
Jiaotong_Lights i1 (
// port map - connection between master ports and signals/registers   
	.branchroad_lights(branchroad_lights),
	.branchroad_time_BCD(branchroad_time_BCD),
	.clk(clk),
	.cnt(cnt),
	.ctr(ctr),
	.mainroad_lights(mainroad_lights),
	.mainroad_time_BCD(mainroad_time_BCD)
);

// clk
initial
begin
	clk = 1'b1;
	# 5000;
	repeat(99)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
	clk = 1'b0;
end 

// ctr
initial
begin
	ctr = 1'b1;
	ctr = #40000 1'b0;
end 

Jiaotong_Lights_vlg_sample_tst tb_sample (
	.clk(clk),
	.ctr(ctr),
	.sampler_tx(sampler)
);

Jiaotong_Lights_vlg_check_tst tb_out(
	.branchroad_lights(branchroad_lights),
	.branchroad_time_BCD(branchroad_time_BCD),
	.cnt(cnt),
	.mainroad_lights(mainroad_lights),
	.mainroad_time_BCD(mainroad_time_BCD),
	.sampler_rx(sampler)
);
endmodule

